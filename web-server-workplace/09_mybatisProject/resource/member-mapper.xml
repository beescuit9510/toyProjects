<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
<!-- 
  <cache-ref namespace="member"/>
 -->
  <select id="selectOneMember" parameterType="member" resultType="member">
	select
		member_no as memberNo,
		member_id as memberId,
		member_pw as memberPw,
		member_name as memberName,
		phone,
		address,
		member_level as memberLevel,
		enroll_date as enrollDate
	from member where member_id = #{memberId} and member_pw= #{memberPw}
  </select>
  <select id="selectAllMember" resultType="member">
	select
		member_no as memberNo,
		member_id as memberId,
		member_pw as memberPw,
		member_name as memberName,
		phone,
		address,
		member_level as memberLevel,
		enroll_date as enrollDate
	from member
	</select> 
	<insert id="insertMember" parameterType="member">
		insert into member values(
			member_seq.nextval,
			#{memberId}, #{memberPw}, #{memberName}, #{phone}, #{address}, 
			2, 
			to_char(sysdate,'yyyy-mm-dd')
		)
	</insert>
	<select id="selectOneMemberMymage" parameterType="_int" resultType="member">
		select
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			member_level as memberLevel,
			enroll_date as enrollDate
		from member where member_no = #{memberNo}
	</select>
	<delete id="deleteMember" parameterType="string">
		delete from member where member_id = #{memberId}
	</delete>
	<update id="updateMember" parameterType="member">
		update member set 
			member_pw = #{memberPw}, 
			phone = #{phone}, 
			address = #{address}
		where member_no = #{memberNo}
	</update>
	<select id="searchId" parameterType="hashmap" resultType="string">
		select member_id as memberId 
		from member where member_name = #{memberName} and phone = #{phone}
	</select>
	<select id="searchPw" parameterType="member.model.vo.PwSearchVO" resultType="string">
		select member_pw as memberPw
		from member where member_id = #{memberId} and phone = #{phone}
	</select>
	<select id="ifTest" parameterType="map" resultType="member">
		  select
		  	member_id as memberId
		  	<if test="ckName != null and ckName.equals('on')">
		  		, member_name as memberName
		  	</if>
		  	<if test="ckPhone != null and ckPhone.equals('on')">
		  		, phone
		  	</if>
		  	<if test="ckAddress != null">
		  		, address
		  	</if>
		  	from member
	</select>
	<select id="chooseTest" parameterType="map" resultType="member">
		select 
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			member_level as memberLevel,
			enroll_date as enrollDate
		from member
		<choose>
			<when test="type.equals('name')">
				where member_name like '%'||'${keyword }'||'%'
			</when>
			<when test="type.equals('id')">
				where member_id like '%'||'${keyword }'||'%'
			</when>
		</choose>
	</select>
	<select id="trimTest" parameterType="map" resultType="member">
		select 
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			member_level as memberLevel,
			enroll_date as enrollDate
		from member
		<trim prefix="where" prefixOverrides="and|or">
			<if test="!memberName.equals('')">
				member_name like '%'||#{memberName }||'%'
			</if>
			<if test="!address.equals('')">
				and address like '%'||#{address }||'%'
			</if>
			
		</trim>
	</select>
	<select id="foreachTest" parameterType="map" resultType="member">
		select 
			member_no as memberNo,
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			member_level as memberLevel,
			enroll_date as enrollDate
		from member where member_id in
		<foreach collection="array" item="memberId" open="(" close=")" separator=",">
			#{memberId}
		</foreach>
	</select>
</mapper>