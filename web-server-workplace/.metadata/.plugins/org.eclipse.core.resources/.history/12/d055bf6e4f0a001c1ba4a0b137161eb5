package MySort;

public class QuickSort {

	public static void main(String[] args) {

		int[] list = { 1, 2, 3, 4, 9, 8, 7, 2, 1, 3, 10, 12, 16 };
//		int[] list = { 4, 2, 1, 16, 3 };
		quickSort(list, 0, list.length);

		for (int i : list) {
			System.out.print(i + "\t");
		}
	}

	private static void quickSort(int[] list, int low, int high) {

		if (low >= high || high - low <= 0) {
			return;
		}

		int mid = 0;

		for (int i = low; i <= high; i++)
			mid += i;

		mid = mid / (high - low);

		int gap = Math.abs(mid - list[0]);
		int pivot = 0;

		
		for (int j = low; j < high; j++) {
			if (list[j] == mid) {
				pivot = j;
				break;
			} else {
				gap = Math.abs(mid- list[j]) < gap ? j : gap;

			}
		}

		int mid = (high - low) / 2;
		int box = list[mid];
		list[mid] = list[pivotToUse];
		list[pivotToUse] = box;
		int[] left = new int[high - low];
		int[] right = new int[high - low];
		int idxR = 0;
		int idxL = 0;

		System.out.println();
		for (int k = low; k < pivotToUse; k++) {

			if (list[k] > list[pivotToUse] && list[high - k] < list[pivotToUse]) {
				int box2 = list[k];
				list[k] = list[pivotToUse];
				list[pivotToUse] = box2;
			} else if (list[k] > list[pivotToUse]) {
				idxL++;

			} else if (list[high - k] < list[pivotToUse]) {
				idxR++;
			}

		}
		int a = Math.max(idxL, idxR);

		for (; a >= 0; a--) {
			int box4 = list[left[idxL--]];
			list[left[idxL--]] = list[right[idxR]];
			list[right[idxR]] = box4;
		}

		while (idxL > -1 && idxR > -1) {
			if (idxL > -1) {
				int box6 = list[left[idxL]];
				for (int i = left[idxL--]; i > pivotToUse; i++) {
					list[i] = list[i + 1];
				}
				list[pivotToUse] = box6;
			}
			if (idxR > -1) {
				int box6 = list[right[idxR]];
				for (int i = pivotToUse; i > left[idxL--]; i++) {
					list[i] = list[i + 1];
				}
				list[pivotToUse] = box6;

			}
		}

		quickSort(list, 0, mid);
		quickSort(list, mid, list.length);
	}

}
